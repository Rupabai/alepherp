/* JasperServerrepositorySoapBindingProxy.h
   Generated by gSOAP 2.8.5 from JasperServer.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef JasperServerrepositorySoapBindingProxy_H
#define JasperServerrepositorySoapBindingProxy_H
#include "JasperServerH.h"

namespace JasperServer {

class SOAP_CMAC repositorySoapBindingProxy
{ public:
	struct soap *soap;
	bool own;
	/// Endpoint URL of service 'repositorySoapBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	repositorySoapBindingProxy();
	/// Constructor to use/share an engine state
	repositorySoapBindingProxy(struct soap*);
	/// Constructor with endpoint URL
	repositorySoapBindingProxy(const char *url);
	/// Constructor with engine input+output mode control
	repositorySoapBindingProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	repositorySoapBindingProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	repositorySoapBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~repositorySoapBindingProxy();
	/// Initializer used by constructors
	virtual	void repositorySoapBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'get' (returns error code or SOAP_OK)
	virtual	int get(std::string _requestXmlString, std::string &_getReturn) { return get(NULL, NULL, _requestXmlString, _getReturn); }
	virtual	int get(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_getReturn);

	/// Web service operation 'put' (returns error code or SOAP_OK)
	virtual	int put(std::string _requestXmlString, std::string &_putReturn) { return put(NULL, NULL, _requestXmlString, _putReturn); }
	virtual	int put(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_putReturn);

	/// Web service operation 'list' (returns error code or SOAP_OK)
	virtual	int list(std::string _requestXmlString, std::string &_listReturn) { return list(NULL, NULL, _requestXmlString, _listReturn); }
	virtual	int list(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_listReturn);

	/// Web service operation 'copy' (returns error code or SOAP_OK)
	virtual	int copy(std::string _requestXmlString, std::string &_copyReturn) { return copy(NULL, NULL, _requestXmlString, _copyReturn); }
	virtual	int copy(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_copyReturn);

	/// Web service operation 'delete' (returns error code or SOAP_OK)
	virtual	int delete_(std::string _requestXmlString, std::string &_deleteReturn) { return delete_(NULL, NULL, _requestXmlString, _deleteReturn); }
	virtual	int delete_(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_deleteReturn);

	/// Web service operation 'runReport' (returns error code or SOAP_OK)
	virtual	int runReport(std::string _requestXmlString, std::string &_runReportReturn) { return runReport(NULL, NULL, _requestXmlString, _runReportReturn); }
	virtual	int runReport(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_runReportReturn);

	/// Web service operation 'move' (returns error code or SOAP_OK)
	virtual	int move(std::string _requestXmlString, std::string &_moveReturn) { return move(NULL, NULL, _requestXmlString, _moveReturn); }
	virtual	int move(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_moveReturn);
};

} // namespace JasperServer

#endif
