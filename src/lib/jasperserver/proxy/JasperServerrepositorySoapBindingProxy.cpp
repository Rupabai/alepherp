/* JasperServerrepositorySoapBindingProxy.cpp
   Generated by gSOAP 2.8.5 from JasperServer.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "JasperServerrepositorySoapBindingProxy.h"

namespace JasperServer {

repositorySoapBindingProxy::repositorySoapBindingProxy()
{	this->soap = soap_new();
	this->own = true;
	repositorySoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

repositorySoapBindingProxy::repositorySoapBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	repositorySoapBindingProxy_init(_soap->imode, _soap->omode);
}

repositorySoapBindingProxy::repositorySoapBindingProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	repositorySoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

repositorySoapBindingProxy::repositorySoapBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	repositorySoapBindingProxy_init(iomode, iomode);
}

repositorySoapBindingProxy::repositorySoapBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	repositorySoapBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

repositorySoapBindingProxy::repositorySoapBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	repositorySoapBindingProxy_init(imode, omode);
}

repositorySoapBindingProxy::~repositorySoapBindingProxy()
{	if (this->own)
		soap_free(this->soap);
}

void repositorySoapBindingProxy::repositorySoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"JasperServer", "http://axis2.ws.jasperserver.jaspersoft.com", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void repositorySoapBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void repositorySoapBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *repositorySoapBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *repositorySoapBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *repositorySoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *repositorySoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int repositorySoapBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int repositorySoapBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void repositorySoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void repositorySoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *repositorySoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int repositorySoapBindingProxy::get(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_getReturn)
{	struct soap *soap = this->soap;
	struct JasperServer__get soap_tmp_JasperServer__get;
	struct JasperServer__getResponse *soap_tmp_JasperServer__getResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/jasperserver/services/repository";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_JasperServer__get._requestXmlString = _requestXmlString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_JasperServer__get(soap, &soap_tmp_JasperServer__get);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_JasperServer__get(soap, &soap_tmp_JasperServer__get, "JasperServer:get", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_JasperServer__get(soap, &soap_tmp_JasperServer__get, "JasperServer:get", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_getReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_getReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_JasperServer__getResponse = soap_get_JasperServer__getResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_getReturn = soap_tmp_JasperServer__getResponse->_getReturn;
	return soap_closesock(soap);
}

int repositorySoapBindingProxy::put(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_putReturn)
{	struct soap *soap = this->soap;
	struct JasperServer__put soap_tmp_JasperServer__put;
	struct JasperServer__putResponse *soap_tmp_JasperServer__putResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/jasperserver/services/repository";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_JasperServer__put._requestXmlString = _requestXmlString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_JasperServer__put(soap, &soap_tmp_JasperServer__put);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_JasperServer__put(soap, &soap_tmp_JasperServer__put, "JasperServer:put", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_JasperServer__put(soap, &soap_tmp_JasperServer__put, "JasperServer:put", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_putReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_putReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_JasperServer__putResponse = soap_get_JasperServer__putResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_putReturn = soap_tmp_JasperServer__putResponse->_putReturn;
	return soap_closesock(soap);
}

int repositorySoapBindingProxy::list(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_listReturn)
{	struct soap *soap = this->soap;
	struct JasperServer__list soap_tmp_JasperServer__list;
	struct JasperServer__listResponse *soap_tmp_JasperServer__listResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/jasperserver/services/repository";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_JasperServer__list._requestXmlString = _requestXmlString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_JasperServer__list(soap, &soap_tmp_JasperServer__list);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_JasperServer__list(soap, &soap_tmp_JasperServer__list, "JasperServer:list", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_JasperServer__list(soap, &soap_tmp_JasperServer__list, "JasperServer:list", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_listReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_listReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_JasperServer__listResponse = soap_get_JasperServer__listResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_listReturn = soap_tmp_JasperServer__listResponse->_listReturn;
	return soap_closesock(soap);
}

int repositorySoapBindingProxy::copy(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_copyReturn)
{	struct soap *soap = this->soap;
	struct JasperServer__copy soap_tmp_JasperServer__copy;
	struct JasperServer__copyResponse *soap_tmp_JasperServer__copyResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/jasperserver/services/repository";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_JasperServer__copy._requestXmlString = _requestXmlString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_JasperServer__copy(soap, &soap_tmp_JasperServer__copy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_JasperServer__copy(soap, &soap_tmp_JasperServer__copy, "JasperServer:copy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_JasperServer__copy(soap, &soap_tmp_JasperServer__copy, "JasperServer:copy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_copyReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_copyReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_JasperServer__copyResponse = soap_get_JasperServer__copyResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_copyReturn = soap_tmp_JasperServer__copyResponse->_copyReturn;
	return soap_closesock(soap);
}

int repositorySoapBindingProxy::delete_(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_deleteReturn)
{	struct soap *soap = this->soap;
	struct JasperServer__delete soap_tmp_JasperServer__delete;
	struct JasperServer__deleteResponse *soap_tmp_JasperServer__deleteResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/jasperserver/services/repository";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_JasperServer__delete._requestXmlString = _requestXmlString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_JasperServer__delete(soap, &soap_tmp_JasperServer__delete);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_JasperServer__delete(soap, &soap_tmp_JasperServer__delete, "JasperServer:delete", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_JasperServer__delete(soap, &soap_tmp_JasperServer__delete, "JasperServer:delete", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_deleteReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_deleteReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_JasperServer__deleteResponse = soap_get_JasperServer__deleteResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_deleteReturn = soap_tmp_JasperServer__deleteResponse->_deleteReturn;
	return soap_closesock(soap);
}

int repositorySoapBindingProxy::runReport(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_runReportReturn)
{	struct soap *soap = this->soap;
	struct JasperServer__runReport soap_tmp_JasperServer__runReport;
	struct JasperServer__runReportResponse *soap_tmp_JasperServer__runReportResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/jasperserver/services/repository";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_JasperServer__runReport._requestXmlString = _requestXmlString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_JasperServer__runReport(soap, &soap_tmp_JasperServer__runReport);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_JasperServer__runReport(soap, &soap_tmp_JasperServer__runReport, "JasperServer:runReport", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_JasperServer__runReport(soap, &soap_tmp_JasperServer__runReport, "JasperServer:runReport", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_runReportReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_runReportReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_JasperServer__runReportResponse = soap_get_JasperServer__runReportResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_runReportReturn = soap_tmp_JasperServer__runReportResponse->_runReportReturn;
	return soap_closesock(soap);
}

int repositorySoapBindingProxy::move(const char *endpoint, const char *soap_action, std::string _requestXmlString, std::string &_moveReturn)
{	struct soap *soap = this->soap;
	struct JasperServer__move soap_tmp_JasperServer__move;
	struct JasperServer__moveResponse *soap_tmp_JasperServer__moveResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/jasperserver/services/repository";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_JasperServer__move._requestXmlString = _requestXmlString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_JasperServer__move(soap, &soap_tmp_JasperServer__move);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_JasperServer__move(soap, &soap_tmp_JasperServer__move, "JasperServer:move", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_JasperServer__move(soap, &soap_tmp_JasperServer__move, "JasperServer:move", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_moveReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_moveReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_JasperServer__moveResponse = soap_get_JasperServer__moveResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_moveReturn = soap_tmp_JasperServer__moveResponse->_moveReturn;
	return soap_closesock(soap);
}

} // namespace JasperServer

/* End of client proxy code */
