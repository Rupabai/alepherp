/* JasperServerC.cpp
   Generated by gSOAP 2.8.5 from JasperServer.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "JasperServerH.h"

namespace JasperServer {

SOAP_SOURCE_STAMP("@(#) JasperServerC.cpp ver 2.8.5 2011-11-29 15:08:10 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_JasperServer_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_JasperServer_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_JasperServer_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_JasperServer_JasperServer__move:
		return soap_in_JasperServer__move(soap, NULL, NULL, "JasperServer:move");
	case SOAP_TYPE_JasperServer_JasperServer__moveResponse:
		return soap_in_JasperServer__moveResponse(soap, NULL, NULL, "JasperServer:moveResponse");
	case SOAP_TYPE_JasperServer_JasperServer__runReport:
		return soap_in_JasperServer__runReport(soap, NULL, NULL, "JasperServer:runReport");
	case SOAP_TYPE_JasperServer_JasperServer__runReportResponse:
		return soap_in_JasperServer__runReportResponse(soap, NULL, NULL, "JasperServer:runReportResponse");
	case SOAP_TYPE_JasperServer_JasperServer__delete:
		return soap_in_JasperServer__delete(soap, NULL, NULL, "JasperServer:delete");
	case SOAP_TYPE_JasperServer_JasperServer__deleteResponse:
		return soap_in_JasperServer__deleteResponse(soap, NULL, NULL, "JasperServer:deleteResponse");
	case SOAP_TYPE_JasperServer_JasperServer__copy:
		return soap_in_JasperServer__copy(soap, NULL, NULL, "JasperServer:copy");
	case SOAP_TYPE_JasperServer_JasperServer__copyResponse:
		return soap_in_JasperServer__copyResponse(soap, NULL, NULL, "JasperServer:copyResponse");
	case SOAP_TYPE_JasperServer_JasperServer__list:
		return soap_in_JasperServer__list(soap, NULL, NULL, "JasperServer:list");
	case SOAP_TYPE_JasperServer_JasperServer__listResponse:
		return soap_in_JasperServer__listResponse(soap, NULL, NULL, "JasperServer:listResponse");
	case SOAP_TYPE_JasperServer_JasperServer__put:
		return soap_in_JasperServer__put(soap, NULL, NULL, "JasperServer:put");
	case SOAP_TYPE_JasperServer_JasperServer__putResponse:
		return soap_in_JasperServer__putResponse(soap, NULL, NULL, "JasperServer:putResponse");
	case SOAP_TYPE_JasperServer_JasperServer__get:
		return soap_in_JasperServer__get(soap, NULL, NULL, "JasperServer:get");
	case SOAP_TYPE_JasperServer_JasperServer__getResponse:
		return soap_in_JasperServer__getResponse(soap, NULL, NULL, "JasperServer:getResponse");
	case SOAP_TYPE_JasperServer__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_JasperServer_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_JasperServer_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_JasperServer_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_JasperServer_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:move"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__move;
			return soap_in_JasperServer__move(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:moveResponse"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__moveResponse;
			return soap_in_JasperServer__moveResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:runReport"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__runReport;
			return soap_in_JasperServer__runReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:runReportResponse"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__runReportResponse;
			return soap_in_JasperServer__runReportResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:delete"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__delete;
			return soap_in_JasperServer__delete(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:deleteResponse"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__deleteResponse;
			return soap_in_JasperServer__deleteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:copy"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__copy;
			return soap_in_JasperServer__copy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:copyResponse"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__copyResponse;
			return soap_in_JasperServer__copyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:list"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__list;
			return soap_in_JasperServer__list(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:listResponse"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__listResponse;
			return soap_in_JasperServer__listResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:put"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__put;
			return soap_in_JasperServer__put(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:putResponse"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__putResponse;
			return soap_in_JasperServer__putResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:get"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__get;
			return soap_in_JasperServer__get(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "JasperServer:getResponse"))
		{	*type = SOAP_TYPE_JasperServer_JasperServer__getResponse;
			return soap_in_JasperServer__getResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_JasperServer__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_JasperServer_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_JasperServer_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_JasperServer_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_JasperServer_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_JasperServer_JasperServer__move:
		return soap_out_JasperServer__move(soap, tag, id, (const struct JasperServer__move *)ptr, "JasperServer:move");
	case SOAP_TYPE_JasperServer_JasperServer__moveResponse:
		return soap_out_JasperServer__moveResponse(soap, tag, id, (const struct JasperServer__moveResponse *)ptr, "JasperServer:moveResponse");
	case SOAP_TYPE_JasperServer_JasperServer__runReport:
		return soap_out_JasperServer__runReport(soap, tag, id, (const struct JasperServer__runReport *)ptr, "JasperServer:runReport");
	case SOAP_TYPE_JasperServer_JasperServer__runReportResponse:
		return soap_out_JasperServer__runReportResponse(soap, tag, id, (const struct JasperServer__runReportResponse *)ptr, "JasperServer:runReportResponse");
	case SOAP_TYPE_JasperServer_JasperServer__delete:
		return soap_out_JasperServer__delete(soap, tag, id, (const struct JasperServer__delete *)ptr, "JasperServer:delete");
	case SOAP_TYPE_JasperServer_JasperServer__deleteResponse:
		return soap_out_JasperServer__deleteResponse(soap, tag, id, (const struct JasperServer__deleteResponse *)ptr, "JasperServer:deleteResponse");
	case SOAP_TYPE_JasperServer_JasperServer__copy:
		return soap_out_JasperServer__copy(soap, tag, id, (const struct JasperServer__copy *)ptr, "JasperServer:copy");
	case SOAP_TYPE_JasperServer_JasperServer__copyResponse:
		return soap_out_JasperServer__copyResponse(soap, tag, id, (const struct JasperServer__copyResponse *)ptr, "JasperServer:copyResponse");
	case SOAP_TYPE_JasperServer_JasperServer__list:
		return soap_out_JasperServer__list(soap, tag, id, (const struct JasperServer__list *)ptr, "JasperServer:list");
	case SOAP_TYPE_JasperServer_JasperServer__listResponse:
		return soap_out_JasperServer__listResponse(soap, tag, id, (const struct JasperServer__listResponse *)ptr, "JasperServer:listResponse");
	case SOAP_TYPE_JasperServer_JasperServer__put:
		return soap_out_JasperServer__put(soap, tag, id, (const struct JasperServer__put *)ptr, "JasperServer:put");
	case SOAP_TYPE_JasperServer_JasperServer__putResponse:
		return soap_out_JasperServer__putResponse(soap, tag, id, (const struct JasperServer__putResponse *)ptr, "JasperServer:putResponse");
	case SOAP_TYPE_JasperServer_JasperServer__get:
		return soap_out_JasperServer__get(soap, tag, id, (const struct JasperServer__get *)ptr, "JasperServer:get");
	case SOAP_TYPE_JasperServer_JasperServer__getResponse:
		return soap_out_JasperServer__getResponse(soap, tag, id, (const struct JasperServer__getResponse *)ptr, "JasperServer:getResponse");
	case SOAP_TYPE_JasperServer__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_JasperServer_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_JasperServer_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__move:
		soap_serialize_JasperServer__move(soap, (const struct JasperServer__move *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__moveResponse:
		soap_serialize_JasperServer__moveResponse(soap, (const struct JasperServer__moveResponse *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__runReport:
		soap_serialize_JasperServer__runReport(soap, (const struct JasperServer__runReport *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__runReportResponse:
		soap_serialize_JasperServer__runReportResponse(soap, (const struct JasperServer__runReportResponse *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__delete:
		soap_serialize_JasperServer__delete(soap, (const struct JasperServer__delete *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__deleteResponse:
		soap_serialize_JasperServer__deleteResponse(soap, (const struct JasperServer__deleteResponse *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__copy:
		soap_serialize_JasperServer__copy(soap, (const struct JasperServer__copy *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__copyResponse:
		soap_serialize_JasperServer__copyResponse(soap, (const struct JasperServer__copyResponse *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__list:
		soap_serialize_JasperServer__list(soap, (const struct JasperServer__list *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__listResponse:
		soap_serialize_JasperServer__listResponse(soap, (const struct JasperServer__listResponse *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__put:
		soap_serialize_JasperServer__put(soap, (const struct JasperServer__put *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__putResponse:
		soap_serialize_JasperServer__putResponse(soap, (const struct JasperServer__putResponse *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__get:
		soap_serialize_JasperServer__get(soap, (const struct JasperServer__get *)ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__getResponse:
		soap_serialize_JasperServer__getResponse(soap, (const struct JasperServer__getResponse *)ptr);
		break;
	case SOAP_TYPE_JasperServer__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_JasperServer_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 JasperServer_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_JasperServer_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__getResponse:
		return (void*)soap_instantiate_JasperServer__getResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__get:
		return (void*)soap_instantiate_JasperServer__get(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__putResponse:
		return (void*)soap_instantiate_JasperServer__putResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__put:
		return (void*)soap_instantiate_JasperServer__put(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__listResponse:
		return (void*)soap_instantiate_JasperServer__listResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__list:
		return (void*)soap_instantiate_JasperServer__list(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__copyResponse:
		return (void*)soap_instantiate_JasperServer__copyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__copy:
		return (void*)soap_instantiate_JasperServer__copy(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__deleteResponse:
		return (void*)soap_instantiate_JasperServer__deleteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__delete:
		return (void*)soap_instantiate_JasperServer__delete(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__runReportResponse:
		return (void*)soap_instantiate_JasperServer__runReportResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__runReport:
		return (void*)soap_instantiate_JasperServer__runReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__moveResponse:
		return (void*)soap_instantiate_JasperServer__moveResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_JasperServer_JasperServer__move:
		return (void*)soap_instantiate_JasperServer__move(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 JasperServer_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_JasperServer_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__getResponse:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__getResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__getResponse*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__get:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__get*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__get*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__putResponse:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__putResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__putResponse*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__put:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__put*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__put*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__listResponse:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__listResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__listResponse*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__list:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__list*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__list*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__copyResponse:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__copyResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__copyResponse*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__copy:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__copy*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__copy*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__deleteResponse:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__deleteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__deleteResponse*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__delete:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__delete*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__delete*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__runReportResponse:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__runReportResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__runReportResponse*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__runReport:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__runReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__runReport*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__moveResponse:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__moveResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__moveResponse*)p->ptr);
		break;
	case SOAP_TYPE_JasperServer_JasperServer__move:
		if (p->size < 0)
			SOAP_DELETE((struct JasperServer__move*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct JasperServer__move*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_JasperServer_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, JasperServer_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, JasperServer_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 JasperServer_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_JasperServer_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_JasperServer_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_JasperServer_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_JasperServer_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_JasperServer_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_JasperServer_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_JasperServer_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_JasperServer_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_std__string, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_SOAP_ENV__Fault, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_SOAP_ENV__Reason, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_SOAP_ENV__Detail, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_SOAP_ENV__Code, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_SOAP_ENV__Header, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__move(struct soap *soap, struct JasperServer__move *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__move(struct soap *soap, const struct JasperServer__move *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__move(struct soap *soap, const char *tag, int id, const struct JasperServer__move *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__move), type))
		return soap->error;
	if (soap_out_std__string(soap, "requestXmlString", -1, &a->_requestXmlString, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__move * SOAP_FMAC4 soap_in_JasperServer__move(struct soap *soap, const char *tag, struct JasperServer__move *a, const char *type)
{
	size_t soap_flag__requestXmlString = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__move *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__move, sizeof(struct JasperServer__move), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__move(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__requestXmlString && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_requestXmlString, "xsd:string"))
				{	soap_flag__requestXmlString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__move *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__move, 0, sizeof(struct JasperServer__move), 0, soap_copy_JasperServer__move);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__requestXmlString > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__move(struct soap *soap, const struct JasperServer__move *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__move);
	if (soap_out_JasperServer__move(soap, tag?tag:"JasperServer:move", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__move * SOAP_FMAC4 soap_get_JasperServer__move(struct soap *soap, struct JasperServer__move *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__move(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__move * SOAP_FMAC2 soap_instantiate_JasperServer__move(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__move(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__move, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__move);
		if (size)
			*size = sizeof(struct JasperServer__move);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__move[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__move);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__move*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__move(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__move %p -> %p\n", q, p));
	*(struct JasperServer__move*)p = *(struct JasperServer__move*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__moveResponse(struct soap *soap, struct JasperServer__moveResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_moveReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__moveResponse(struct soap *soap, const struct JasperServer__moveResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_moveReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__moveResponse(struct soap *soap, const char *tag, int id, const struct JasperServer__moveResponse *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__moveResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "moveReturn", -1, &a->_moveReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__moveResponse * SOAP_FMAC4 soap_in_JasperServer__moveResponse(struct soap *soap, const char *tag, struct JasperServer__moveResponse *a, const char *type)
{
	size_t soap_flag__moveReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__moveResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__moveResponse, sizeof(struct JasperServer__moveResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__moveResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__moveReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_moveReturn, "xsd:string"))
				{	soap_flag__moveReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__moveResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__moveResponse, 0, sizeof(struct JasperServer__moveResponse), 0, soap_copy_JasperServer__moveResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__moveReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__moveResponse(struct soap *soap, const struct JasperServer__moveResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__moveResponse);
	if (soap_out_JasperServer__moveResponse(soap, tag?tag:"JasperServer:moveResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__moveResponse * SOAP_FMAC4 soap_get_JasperServer__moveResponse(struct soap *soap, struct JasperServer__moveResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__moveResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__moveResponse * SOAP_FMAC2 soap_instantiate_JasperServer__moveResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__moveResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__moveResponse, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__moveResponse);
		if (size)
			*size = sizeof(struct JasperServer__moveResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__moveResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__moveResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__moveResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__moveResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__moveResponse %p -> %p\n", q, p));
	*(struct JasperServer__moveResponse*)p = *(struct JasperServer__moveResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__runReport(struct soap *soap, struct JasperServer__runReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__runReport(struct soap *soap, const struct JasperServer__runReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__runReport(struct soap *soap, const char *tag, int id, const struct JasperServer__runReport *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__runReport), type))
		return soap->error;
	if (soap_out_std__string(soap, "requestXmlString", -1, &a->_requestXmlString, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__runReport * SOAP_FMAC4 soap_in_JasperServer__runReport(struct soap *soap, const char *tag, struct JasperServer__runReport *a, const char *type)
{
	size_t soap_flag__requestXmlString = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__runReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__runReport, sizeof(struct JasperServer__runReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__runReport(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__requestXmlString && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_requestXmlString, "xsd:string"))
				{	soap_flag__requestXmlString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__runReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__runReport, 0, sizeof(struct JasperServer__runReport), 0, soap_copy_JasperServer__runReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__requestXmlString > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__runReport(struct soap *soap, const struct JasperServer__runReport *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__runReport);
	if (soap_out_JasperServer__runReport(soap, tag?tag:"JasperServer:runReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__runReport * SOAP_FMAC4 soap_get_JasperServer__runReport(struct soap *soap, struct JasperServer__runReport *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__runReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__runReport * SOAP_FMAC2 soap_instantiate_JasperServer__runReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__runReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__runReport, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__runReport);
		if (size)
			*size = sizeof(struct JasperServer__runReport);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__runReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__runReport);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__runReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__runReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__runReport %p -> %p\n", q, p));
	*(struct JasperServer__runReport*)p = *(struct JasperServer__runReport*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__runReportResponse(struct soap *soap, struct JasperServer__runReportResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_runReportReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__runReportResponse(struct soap *soap, const struct JasperServer__runReportResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_runReportReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__runReportResponse(struct soap *soap, const char *tag, int id, const struct JasperServer__runReportResponse *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__runReportResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "runReportReturn", -1, &a->_runReportReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__runReportResponse * SOAP_FMAC4 soap_in_JasperServer__runReportResponse(struct soap *soap, const char *tag, struct JasperServer__runReportResponse *a, const char *type)
{
	size_t soap_flag__runReportReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__runReportResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__runReportResponse, sizeof(struct JasperServer__runReportResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__runReportResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__runReportReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_runReportReturn, "xsd:string"))
				{	soap_flag__runReportReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__runReportResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__runReportResponse, 0, sizeof(struct JasperServer__runReportResponse), 0, soap_copy_JasperServer__runReportResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__runReportReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__runReportResponse(struct soap *soap, const struct JasperServer__runReportResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__runReportResponse);
	if (soap_out_JasperServer__runReportResponse(soap, tag?tag:"JasperServer:runReportResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__runReportResponse * SOAP_FMAC4 soap_get_JasperServer__runReportResponse(struct soap *soap, struct JasperServer__runReportResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__runReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__runReportResponse * SOAP_FMAC2 soap_instantiate_JasperServer__runReportResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__runReportResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__runReportResponse, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__runReportResponse);
		if (size)
			*size = sizeof(struct JasperServer__runReportResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__runReportResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__runReportResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__runReportResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__runReportResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__runReportResponse %p -> %p\n", q, p));
	*(struct JasperServer__runReportResponse*)p = *(struct JasperServer__runReportResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__delete(struct soap *soap, struct JasperServer__delete *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__delete(struct soap *soap, const struct JasperServer__delete *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__delete(struct soap *soap, const char *tag, int id, const struct JasperServer__delete *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__delete), type))
		return soap->error;
	if (soap_out_std__string(soap, "requestXmlString", -1, &a->_requestXmlString, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__delete * SOAP_FMAC4 soap_in_JasperServer__delete(struct soap *soap, const char *tag, struct JasperServer__delete *a, const char *type)
{
	size_t soap_flag__requestXmlString = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__delete *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__delete, sizeof(struct JasperServer__delete), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__delete(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__requestXmlString && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_requestXmlString, "xsd:string"))
				{	soap_flag__requestXmlString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__delete *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__delete, 0, sizeof(struct JasperServer__delete), 0, soap_copy_JasperServer__delete);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__requestXmlString > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__delete(struct soap *soap, const struct JasperServer__delete *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__delete);
	if (soap_out_JasperServer__delete(soap, tag?tag:"JasperServer:delete", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__delete * SOAP_FMAC4 soap_get_JasperServer__delete(struct soap *soap, struct JasperServer__delete *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__delete(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__delete * SOAP_FMAC2 soap_instantiate_JasperServer__delete(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__delete(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__delete, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__delete);
		if (size)
			*size = sizeof(struct JasperServer__delete);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__delete[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__delete);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__delete*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__delete(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__delete %p -> %p\n", q, p));
	*(struct JasperServer__delete*)p = *(struct JasperServer__delete*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__deleteResponse(struct soap *soap, struct JasperServer__deleteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_deleteReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__deleteResponse(struct soap *soap, const struct JasperServer__deleteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_deleteReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__deleteResponse(struct soap *soap, const char *tag, int id, const struct JasperServer__deleteResponse *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__deleteResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "deleteReturn", -1, &a->_deleteReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__deleteResponse * SOAP_FMAC4 soap_in_JasperServer__deleteResponse(struct soap *soap, const char *tag, struct JasperServer__deleteResponse *a, const char *type)
{
	size_t soap_flag__deleteReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__deleteResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__deleteResponse, sizeof(struct JasperServer__deleteResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__deleteResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__deleteReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_deleteReturn, "xsd:string"))
				{	soap_flag__deleteReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__deleteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__deleteResponse, 0, sizeof(struct JasperServer__deleteResponse), 0, soap_copy_JasperServer__deleteResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__deleteReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__deleteResponse(struct soap *soap, const struct JasperServer__deleteResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__deleteResponse);
	if (soap_out_JasperServer__deleteResponse(soap, tag?tag:"JasperServer:deleteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__deleteResponse * SOAP_FMAC4 soap_get_JasperServer__deleteResponse(struct soap *soap, struct JasperServer__deleteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__deleteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__deleteResponse * SOAP_FMAC2 soap_instantiate_JasperServer__deleteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__deleteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__deleteResponse, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__deleteResponse);
		if (size)
			*size = sizeof(struct JasperServer__deleteResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__deleteResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__deleteResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__deleteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__deleteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__deleteResponse %p -> %p\n", q, p));
	*(struct JasperServer__deleteResponse*)p = *(struct JasperServer__deleteResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__copy(struct soap *soap, struct JasperServer__copy *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__copy(struct soap *soap, const struct JasperServer__copy *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__copy(struct soap *soap, const char *tag, int id, const struct JasperServer__copy *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__copy), type))
		return soap->error;
	if (soap_out_std__string(soap, "requestXmlString", -1, &a->_requestXmlString, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__copy * SOAP_FMAC4 soap_in_JasperServer__copy(struct soap *soap, const char *tag, struct JasperServer__copy *a, const char *type)
{
	size_t soap_flag__requestXmlString = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__copy *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__copy, sizeof(struct JasperServer__copy), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__copy(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__requestXmlString && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_requestXmlString, "xsd:string"))
				{	soap_flag__requestXmlString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__copy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__copy, 0, sizeof(struct JasperServer__copy), 0, soap_copy_JasperServer__copy);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__requestXmlString > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__copy(struct soap *soap, const struct JasperServer__copy *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__copy);
	if (soap_out_JasperServer__copy(soap, tag?tag:"JasperServer:copy", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__copy * SOAP_FMAC4 soap_get_JasperServer__copy(struct soap *soap, struct JasperServer__copy *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__copy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__copy * SOAP_FMAC2 soap_instantiate_JasperServer__copy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__copy(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__copy, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__copy);
		if (size)
			*size = sizeof(struct JasperServer__copy);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__copy[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__copy);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__copy*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__copy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__copy %p -> %p\n", q, p));
	*(struct JasperServer__copy*)p = *(struct JasperServer__copy*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__copyResponse(struct soap *soap, struct JasperServer__copyResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_copyReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__copyResponse(struct soap *soap, const struct JasperServer__copyResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_copyReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__copyResponse(struct soap *soap, const char *tag, int id, const struct JasperServer__copyResponse *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__copyResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "copyReturn", -1, &a->_copyReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__copyResponse * SOAP_FMAC4 soap_in_JasperServer__copyResponse(struct soap *soap, const char *tag, struct JasperServer__copyResponse *a, const char *type)
{
	size_t soap_flag__copyReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__copyResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__copyResponse, sizeof(struct JasperServer__copyResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__copyResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__copyReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_copyReturn, "xsd:string"))
				{	soap_flag__copyReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__copyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__copyResponse, 0, sizeof(struct JasperServer__copyResponse), 0, soap_copy_JasperServer__copyResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__copyReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__copyResponse(struct soap *soap, const struct JasperServer__copyResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__copyResponse);
	if (soap_out_JasperServer__copyResponse(soap, tag?tag:"JasperServer:copyResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__copyResponse * SOAP_FMAC4 soap_get_JasperServer__copyResponse(struct soap *soap, struct JasperServer__copyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__copyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__copyResponse * SOAP_FMAC2 soap_instantiate_JasperServer__copyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__copyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__copyResponse, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__copyResponse);
		if (size)
			*size = sizeof(struct JasperServer__copyResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__copyResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__copyResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__copyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__copyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__copyResponse %p -> %p\n", q, p));
	*(struct JasperServer__copyResponse*)p = *(struct JasperServer__copyResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__list(struct soap *soap, struct JasperServer__list *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__list(struct soap *soap, const struct JasperServer__list *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__list(struct soap *soap, const char *tag, int id, const struct JasperServer__list *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__list), type))
		return soap->error;
	if (soap_out_std__string(soap, "requestXmlString", -1, &a->_requestXmlString, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__list * SOAP_FMAC4 soap_in_JasperServer__list(struct soap *soap, const char *tag, struct JasperServer__list *a, const char *type)
{
	size_t soap_flag__requestXmlString = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__list *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__list, sizeof(struct JasperServer__list), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__list(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__requestXmlString && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_requestXmlString, "xsd:string"))
				{	soap_flag__requestXmlString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__list *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__list, 0, sizeof(struct JasperServer__list), 0, soap_copy_JasperServer__list);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__requestXmlString > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__list(struct soap *soap, const struct JasperServer__list *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__list);
	if (soap_out_JasperServer__list(soap, tag?tag:"JasperServer:list", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__list * SOAP_FMAC4 soap_get_JasperServer__list(struct soap *soap, struct JasperServer__list *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__list(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__list * SOAP_FMAC2 soap_instantiate_JasperServer__list(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__list(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__list, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__list);
		if (size)
			*size = sizeof(struct JasperServer__list);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__list[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__list);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__list*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__list(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__list %p -> %p\n", q, p));
	*(struct JasperServer__list*)p = *(struct JasperServer__list*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__listResponse(struct soap *soap, struct JasperServer__listResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_listReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__listResponse(struct soap *soap, const struct JasperServer__listResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_listReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__listResponse(struct soap *soap, const char *tag, int id, const struct JasperServer__listResponse *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__listResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "listReturn", -1, &a->_listReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__listResponse * SOAP_FMAC4 soap_in_JasperServer__listResponse(struct soap *soap, const char *tag, struct JasperServer__listResponse *a, const char *type)
{
	size_t soap_flag__listReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__listResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__listResponse, sizeof(struct JasperServer__listResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__listResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__listReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_listReturn, "xsd:string"))
				{	soap_flag__listReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__listResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__listResponse, 0, sizeof(struct JasperServer__listResponse), 0, soap_copy_JasperServer__listResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__listReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__listResponse(struct soap *soap, const struct JasperServer__listResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__listResponse);
	if (soap_out_JasperServer__listResponse(soap, tag?tag:"JasperServer:listResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__listResponse * SOAP_FMAC4 soap_get_JasperServer__listResponse(struct soap *soap, struct JasperServer__listResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__listResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__listResponse * SOAP_FMAC2 soap_instantiate_JasperServer__listResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__listResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__listResponse, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__listResponse);
		if (size)
			*size = sizeof(struct JasperServer__listResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__listResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__listResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__listResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__listResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__listResponse %p -> %p\n", q, p));
	*(struct JasperServer__listResponse*)p = *(struct JasperServer__listResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__put(struct soap *soap, struct JasperServer__put *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__put(struct soap *soap, const struct JasperServer__put *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__put(struct soap *soap, const char *tag, int id, const struct JasperServer__put *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__put), type))
		return soap->error;
	if (soap_out_std__string(soap, "requestXmlString", -1, &a->_requestXmlString, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__put * SOAP_FMAC4 soap_in_JasperServer__put(struct soap *soap, const char *tag, struct JasperServer__put *a, const char *type)
{
	size_t soap_flag__requestXmlString = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__put *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__put, sizeof(struct JasperServer__put), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__put(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__requestXmlString && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_requestXmlString, "xsd:string"))
				{	soap_flag__requestXmlString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__put *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__put, 0, sizeof(struct JasperServer__put), 0, soap_copy_JasperServer__put);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__requestXmlString > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__put(struct soap *soap, const struct JasperServer__put *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__put);
	if (soap_out_JasperServer__put(soap, tag?tag:"JasperServer:put", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__put * SOAP_FMAC4 soap_get_JasperServer__put(struct soap *soap, struct JasperServer__put *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__put(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__put * SOAP_FMAC2 soap_instantiate_JasperServer__put(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__put(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__put, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__put);
		if (size)
			*size = sizeof(struct JasperServer__put);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__put[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__put);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__put*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__put(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__put %p -> %p\n", q, p));
	*(struct JasperServer__put*)p = *(struct JasperServer__put*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__putResponse(struct soap *soap, struct JasperServer__putResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_putReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__putResponse(struct soap *soap, const struct JasperServer__putResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_putReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__putResponse(struct soap *soap, const char *tag, int id, const struct JasperServer__putResponse *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__putResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "putReturn", -1, &a->_putReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__putResponse * SOAP_FMAC4 soap_in_JasperServer__putResponse(struct soap *soap, const char *tag, struct JasperServer__putResponse *a, const char *type)
{
	size_t soap_flag__putReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__putResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__putResponse, sizeof(struct JasperServer__putResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__putResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__putReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_putReturn, "xsd:string"))
				{	soap_flag__putReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__putResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__putResponse, 0, sizeof(struct JasperServer__putResponse), 0, soap_copy_JasperServer__putResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__putReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__putResponse(struct soap *soap, const struct JasperServer__putResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__putResponse);
	if (soap_out_JasperServer__putResponse(soap, tag?tag:"JasperServer:putResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__putResponse * SOAP_FMAC4 soap_get_JasperServer__putResponse(struct soap *soap, struct JasperServer__putResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__putResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__putResponse * SOAP_FMAC2 soap_instantiate_JasperServer__putResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__putResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__putResponse, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__putResponse);
		if (size)
			*size = sizeof(struct JasperServer__putResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__putResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__putResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__putResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__putResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__putResponse %p -> %p\n", q, p));
	*(struct JasperServer__putResponse*)p = *(struct JasperServer__putResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__get(struct soap *soap, struct JasperServer__get *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__get(struct soap *soap, const struct JasperServer__get *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_requestXmlString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__get(struct soap *soap, const char *tag, int id, const struct JasperServer__get *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__get), type))
		return soap->error;
	if (soap_out_std__string(soap, "requestXmlString", -1, &a->_requestXmlString, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__get * SOAP_FMAC4 soap_in_JasperServer__get(struct soap *soap, const char *tag, struct JasperServer__get *a, const char *type)
{
	size_t soap_flag__requestXmlString = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__get *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__get, sizeof(struct JasperServer__get), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__get(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__requestXmlString && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_requestXmlString, "xsd:string"))
				{	soap_flag__requestXmlString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__get *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__get, 0, sizeof(struct JasperServer__get), 0, soap_copy_JasperServer__get);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__requestXmlString > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__get(struct soap *soap, const struct JasperServer__get *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__get);
	if (soap_out_JasperServer__get(soap, tag?tag:"JasperServer:get", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__get * SOAP_FMAC4 soap_get_JasperServer__get(struct soap *soap, struct JasperServer__get *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__get(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__get * SOAP_FMAC2 soap_instantiate_JasperServer__get(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__get(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__get, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__get);
		if (size)
			*size = sizeof(struct JasperServer__get);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__get[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__get);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__get*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__get(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__get %p -> %p\n", q, p));
	*(struct JasperServer__get*)p = *(struct JasperServer__get*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_JasperServer__getResponse(struct soap *soap, struct JasperServer__getResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_getReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_JasperServer__getResponse(struct soap *soap, const struct JasperServer__getResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->_getReturn);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_JasperServer__getResponse(struct soap *soap, const char *tag, int id, const struct JasperServer__getResponse *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_JasperServer_JasperServer__getResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "getReturn", -1, &a->_getReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct JasperServer__getResponse * SOAP_FMAC4 soap_in_JasperServer__getResponse(struct soap *soap, const char *tag, struct JasperServer__getResponse *a, const char *type)
{
	size_t soap_flag__getReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct JasperServer__getResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_JasperServer_JasperServer__getResponse, sizeof(struct JasperServer__getResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_JasperServer__getResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__getReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_getReturn, "xsd:string"))
				{	soap_flag__getReturn--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct JasperServer__getResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_JasperServer_JasperServer__getResponse, 0, sizeof(struct JasperServer__getResponse), 0, soap_copy_JasperServer__getResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__getReturn > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_JasperServer__getResponse(struct soap *soap, const struct JasperServer__getResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_JasperServer__getResponse);
	if (soap_out_JasperServer__getResponse(soap, tag?tag:"JasperServer:getResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct JasperServer__getResponse * SOAP_FMAC4 soap_get_JasperServer__getResponse(struct soap *soap, struct JasperServer__getResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_JasperServer__getResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct JasperServer__getResponse * SOAP_FMAC2 soap_instantiate_JasperServer__getResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_JasperServer__getResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_JasperServer_JasperServer__getResponse, n, JasperServer_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__getResponse);
		if (size)
			*size = sizeof(struct JasperServer__getResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct JasperServer__getResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct JasperServer__getResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct JasperServer__getResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_JasperServer__getResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct JasperServer__getResponse %p -> %p\n", q, p));
	*(struct JasperServer__getResponse*)p = *(struct JasperServer__getResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_JasperServer_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_JasperServer_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_JasperServer_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_JasperServer_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_JasperServer_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_JasperServer_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_JasperServer_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_JasperServer_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_JasperServer_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_JasperServer__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_JasperServer__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_JasperServer_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_JasperServer_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_JasperServer_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_JasperServer_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

} // namespace JasperServer


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of JasperServerC.cpp */
