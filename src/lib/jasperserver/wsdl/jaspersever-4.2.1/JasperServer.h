/* JasperServer.h
   Generated by wsdl2h 2.8.5 from JasperServer.wsdl and typemap.dat
   2011-11-29 15:08:10 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on JasperServer.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://localhost:8080/jasperserver/services/repository                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap JasperServer service name:	repositorySoapBinding 
//gsoap JasperServer service type:	ManagementService 
//gsoap JasperServer service port:	http://localhost:8080/jasperserver/services/repository 
//gsoap JasperServer service namespace:	http://axis2.ws.jasperserver.jaspersoft.com 
//gsoap JasperServer service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref repositorySoapBinding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page repositorySoapBinding Binding "repositorySoapBinding"

@section repositorySoapBinding_operations Operations of Binding  "repositorySoapBinding"

  - @ref JasperServer__get

  - @ref JasperServer__put

  - @ref JasperServer__list

  - @ref JasperServer__copy

  - @ref JasperServer__delete

  - @ref JasperServer__runReport

  - @ref JasperServer__move

@section repositorySoapBinding_ports Endpoints of Binding  "repositorySoapBinding"

  - http://localhost:8080/jasperserver/services/repository

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   repositorySoapBinding                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   JasperServer__get                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "JasperServer__get" of service binding "repositorySoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing action: "http://localhost:8080/jasperserver/services/repository/ManagementService/getRequest"

  - Addressing response action: "http://localhost:8080/jasperserver/services/repository/ManagementService/getResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_JasperServer__get(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_getReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int JasperServer__get(
    struct soap *soap,
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_getReturn
  );
@endcode

C++ proxy class (defined in soaprepositorySoapBindingProxy.h):
@code
  class repositorySoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaprepositorySoapBindingService.h):
@code
  class repositorySoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap JasperServer service method-style:	get rpc
//gsoap JasperServer service method-encoding:	get http://schemas.xmlsoap.org/soap/encoding/
//gsoap JasperServer service method-action:	get ""
//gsoap JasperServer service method-output-action:	get http://localhost:8080/jasperserver/services/repository/ManagementService/getResponse
int JasperServer__get(
    std::string                         _requestXmlString,	///< Request parameter
    std::string                        &_getReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   JasperServer__put                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "JasperServer__put" of service binding "repositorySoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing action: "http://localhost:8080/jasperserver/services/repository/ManagementService/putRequest"

  - Addressing response action: "http://localhost:8080/jasperserver/services/repository/ManagementService/putResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_JasperServer__put(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_putReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int JasperServer__put(
    struct soap *soap,
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_putReturn
  );
@endcode

C++ proxy class (defined in soaprepositorySoapBindingProxy.h):
@code
  class repositorySoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaprepositorySoapBindingService.h):
@code
  class repositorySoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap JasperServer service method-style:	put rpc
//gsoap JasperServer service method-encoding:	put http://schemas.xmlsoap.org/soap/encoding/
//gsoap JasperServer service method-action:	put ""
//gsoap JasperServer service method-output-action:	put http://localhost:8080/jasperserver/services/repository/ManagementService/putResponse
int JasperServer__put(
    std::string                         _requestXmlString,	///< Request parameter
    std::string                        &_putReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   JasperServer__list                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "JasperServer__list" of service binding "repositorySoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing action: "http://localhost:8080/jasperserver/services/repository/ManagementService/listRequest"

  - Addressing response action: "http://localhost:8080/jasperserver/services/repository/ManagementService/listResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_JasperServer__list(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_listReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int JasperServer__list(
    struct soap *soap,
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_listReturn
  );
@endcode

C++ proxy class (defined in soaprepositorySoapBindingProxy.h):
@code
  class repositorySoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaprepositorySoapBindingService.h):
@code
  class repositorySoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap JasperServer service method-style:	list rpc
//gsoap JasperServer service method-encoding:	list http://schemas.xmlsoap.org/soap/encoding/
//gsoap JasperServer service method-action:	list ""
//gsoap JasperServer service method-output-action:	list http://localhost:8080/jasperserver/services/repository/ManagementService/listResponse
int JasperServer__list(
    std::string                         _requestXmlString,	///< Request parameter
    std::string                        &_listReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   JasperServer__copy                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "JasperServer__copy" of service binding "repositorySoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing action: "http://localhost:8080/jasperserver/services/repository/ManagementService/copyRequest"

  - Addressing response action: "http://localhost:8080/jasperserver/services/repository/ManagementService/copyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_JasperServer__copy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_copyReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int JasperServer__copy(
    struct soap *soap,
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_copyReturn
  );
@endcode

C++ proxy class (defined in soaprepositorySoapBindingProxy.h):
@code
  class repositorySoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaprepositorySoapBindingService.h):
@code
  class repositorySoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap JasperServer service method-style:	copy rpc
//gsoap JasperServer service method-encoding:	copy http://schemas.xmlsoap.org/soap/encoding/
//gsoap JasperServer service method-action:	copy ""
//gsoap JasperServer service method-output-action:	copy http://localhost:8080/jasperserver/services/repository/ManagementService/copyResponse
int JasperServer__copy(
    std::string                         _requestXmlString,	///< Request parameter
    std::string                        &_copyReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   JasperServer__delete                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "JasperServer__delete" of service binding "repositorySoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing action: "http://localhost:8080/jasperserver/services/repository/ManagementService/deleteRequest"

  - Addressing response action: "http://localhost:8080/jasperserver/services/repository/ManagementService/deleteResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_JasperServer__delete(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_deleteReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int JasperServer__delete(
    struct soap *soap,
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_deleteReturn
  );
@endcode

C++ proxy class (defined in soaprepositorySoapBindingProxy.h):
@code
  class repositorySoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaprepositorySoapBindingService.h):
@code
  class repositorySoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap JasperServer service method-style:	delete rpc
//gsoap JasperServer service method-encoding:	delete http://schemas.xmlsoap.org/soap/encoding/
//gsoap JasperServer service method-action:	delete ""
//gsoap JasperServer service method-output-action:	delete http://localhost:8080/jasperserver/services/repository/ManagementService/deleteResponse
int JasperServer__delete(
    std::string                         _requestXmlString,	///< Request parameter
    std::string                        &_deleteReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   JasperServer__runReport                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "JasperServer__runReport" of service binding "repositorySoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing action: "http://localhost:8080/jasperserver/services/repository/ManagementService/runReportRequest"

  - Addressing response action: "http://localhost:8080/jasperserver/services/repository/ManagementService/runReportResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_JasperServer__runReport(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_runReportReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int JasperServer__runReport(
    struct soap *soap,
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_runReportReturn
  );
@endcode

C++ proxy class (defined in soaprepositorySoapBindingProxy.h):
@code
  class repositorySoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaprepositorySoapBindingService.h):
@code
  class repositorySoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap JasperServer service method-style:	runReport rpc
//gsoap JasperServer service method-encoding:	runReport http://schemas.xmlsoap.org/soap/encoding/
//gsoap JasperServer service method-action:	runReport ""
//gsoap JasperServer service method-output-action:	runReport http://localhost:8080/jasperserver/services/repository/ManagementService/runReportResponse
int JasperServer__runReport(
    std::string                         _requestXmlString,	///< Request parameter
    std::string                        &_runReportReturn	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   JasperServer__move                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "JasperServer__move" of service binding "repositorySoapBinding"

/**

Operation details:


  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing action: "http://localhost:8080/jasperserver/services/repository/ManagementService/moveRequest"

  - Addressing response action: "http://localhost:8080/jasperserver/services/repository/ManagementService/moveResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_JasperServer__move(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_moveReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int JasperServer__move(
    struct soap *soap,
    // request parameters:
    std::string                         requestXmlString,
    // response parameters:
    std::string                        &_moveReturn
  );
@endcode

C++ proxy class (defined in soaprepositorySoapBindingProxy.h):
@code
  class repositorySoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaprepositorySoapBindingService.h):
@code
  class repositorySoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap JasperServer service method-style:	move rpc
//gsoap JasperServer service method-encoding:	move http://schemas.xmlsoap.org/soap/encoding/
//gsoap JasperServer service method-action:	move ""
//gsoap JasperServer service method-output-action:	move http://localhost:8080/jasperserver/services/repository/ManagementService/moveResponse
int JasperServer__move(
    std::string                         _requestXmlString,	///< Request parameter
    std::string                        &_moveReturn	///< Response parameter
);

/* End of JasperServer.h */
